-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.3).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParRegExp
  ( happyError
  , myLexer
  , pRegExp
  , pRegExp1
  , pRegExp2
  , pRegExp3
  ) where

import Prelude

import qualified AbsRegExp
import LexRegExp

}

%name pRegExp RegExp
%name pRegExp1 RegExp1
%name pRegExp2 RegExp2
%name pRegExp3 RegExp3
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('     { PT _ (TS _ 1) }
  ')'     { PT _ (TS _ 2) }
  '*'     { PT _ (TS _ 3) }
  'U'     { PT _ (TS _ 4) }
  L_Ident { PT _ (TV $$)  }

%%

Ident :: { AbsRegExp.Ident }
Ident  : L_Ident { AbsRegExp.Ident $1 }

RegExp :: { AbsRegExp.RegExp }
RegExp
  : {- empty -} { AbsRegExp.REmpty }
  | RegExp 'U' RegExp1 { AbsRegExp.RUnion $1 $3 }
  | RegExp1 { $1 }

RegExp1 :: { AbsRegExp.RegExp }
RegExp1
  : RegExp1 RegExp2 { AbsRegExp.RSequence $1 $2 } | RegExp2 { $1 }

RegExp2 :: { AbsRegExp.RegExp }
RegExp2 : RegExp2 '*' { AbsRegExp.RClosure $1 } | RegExp3 { $1 }

RegExp3 :: { AbsRegExp.RegExp }
RegExp3 : Ident { AbsRegExp.RSymbol $1 } | '(' RegExp ')' { $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

